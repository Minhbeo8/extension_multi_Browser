// ==UserScript==
// @name         Multi-Tab Account Manager for UGPhone
// @namespace    http://tampermonkey.net/
// @version      3.8.1
// @description  Qu·∫£n l√Ω nhi·ªÅu t√†i kho·∫£n
// @author       Minhbeo8
// @match        https://www.ugphone.com/*
// @match        https://ugphone.com/*
// @match        https://www.ugphone.com/toc-portal/*
// @match        https://ugphone.com/toc-portal/*
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_deleteValue
// @grant        GM_listValues
// @grant        GM_addStyle
// @grant        GM_openInTab
// ==/UserScript==

(function() {
    'use strict';

    // CSS cho giao di·ªán
    GM_addStyle(`
        #tabManager {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            z-index: 10000;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            font-size: 13px;
            min-width: 350px;
            max-width: 98vw;
            max-height: 80vh;
            overflow-y: auto;
        }
        .tab-info {
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            border: 1px solid rgba(255,255,255,0.2);
        }
        .current-tab {
            background: rgba(76, 175, 80, 0.2);
            border: 2px solid #4CAF50;
        }
        .account-selector {
            background: rgba(255,255,255,0.05);
            border-radius: 8px;
            padding: 12px;
            margin: 10px 0;
        }
        .account-item {
            background: rgba(255,255,255,0.1);
            border-radius: 6px;
            padding: 8px 12px;
            margin: 5px 0;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(255,255,255,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .account-item:hover {
            background: rgba(255,255,255,0.2);
            transform: translateX(5px);
        }
        .account-item.active {
            background: rgba(76, 175, 80, 0.3);
            border: 1px solid #4CAF50;
        }
        .btn {
            background: rgba(255,255,255,0.2);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
            margin: 3px;
        }
        .btn:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-1px);
        }
        .btn-primary { background: #4CAF50; }
        .btn-danger { background: #f44336; }
        .btn-info { background: #2196F3; }
        .btn-warning { background: #FF9800; }
        .input-field {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid rgba(255,255,255,0.3);
            border-radius: 6px;
            background: rgba(255,255,255,0.1);
            color: white;
            font-size: 12px;
            margin: 5px 0;
        }
        .input-field::placeholder {
            color: rgba(255,255,255,0.7);
        }
        #toggleBtn {
            position: fixed;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 16px;
            border-radius: 50px;
            cursor: move;
            z-index: 10001;
            font-size: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            user-select: none;
            transition: all 0.3s ease;
        }
        #toggleBtn:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(0,0,0,0.4);
        }
        #toggleBtn.dragging {
            opacity: 0.8;
            transform: scale(1.1);
            box-shadow: 0 8px 25px rgba(0,0,0,0.5);
        }
        .flex-row {
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap;
        }
    `);

    class MultiTabAccountManager {
        constructor() {
            this.tabId = this.getTabId();
            this.accounts = GM_getValue('saved_accounts', {});
            this.tabSessions = GM_getValue('tab_sessions', {});
            this.currentAccount = null;

            // Dragging variables
            this.isDragging = false;
            this.dragOffset = { x: 0, y: 0 };
            this.lastPointerDown = {x: 0, y: 0, t: 0};

            this.init();
        }

        getTabId() {
            let tabId = sessionStorage.getItem('multiTabId');
            if (!tabId) {
                tabId = 'tab_' + Date.now() + '_' + Math.random().toString(36).substr(2, 8);
                sessionStorage.setItem('multiTabId', tabId);
            }
            return tabId;
        }

        init() {
            this.checkAndSetupCleanTab();
            this.registerTab();
            this.loadTabAccount();
            this.createUI();
            this.setupDragging();
            this.cleanupClosedTabs();
            setInterval(() => { this.updateTabActivity(); }, 5000);
        }

        checkAndSetupCleanTab() {
            const shouldClean = GM_getValue('clean_next_tab', false);
            if (shouldClean) {
                GM_deleteValue('clean_next_tab');
                this.forceCleanTab();
                sessionStorage.setItem('isCleanTab', 'true');
            }
        }

        forceCleanTab() {
            const keysToRemove = [];
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key && 
                    !key.startsWith('GM_') && 
                    !key.includes('tampermonkey') && 
                    key !== 'multiTabId' &&
                    !key.includes('greasemonkey')) {
                    keysToRemove.push(key);
                }
            }
            keysToRemove.forEach(key => localStorage.removeItem(key));
            this.clearAllCookies();

            const sessionKeysToRemove = [];
            for (let i = 0; i < sessionStorage.length; i++) {
                const key = sessionStorage.key(i);
                if (key && key !== 'multiTabId' && key !== 'isCleanTab') {
                    sessionKeysToRemove.push(key);
                }
            }
            sessionKeysToRemove.forEach(key => sessionStorage.removeItem(key));
        }

        clearAllCookies() {
            const cookies = document.cookie.split(';');
            cookies.forEach(cookie => {
                const eqPos = cookie.indexOf('=');
                const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();
                if (name) {
                    const domains = ['', '.ugphone.com', 'ugphone.com', '.www.ugphone.com'];
                    const paths = ['/', '/toc-portal/', '/toc-portal'];
                    domains.forEach(domain => {
                        paths.forEach(path => {
                            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=${path}; domain=${domain}`;
                        });
                    });
                }
            });
        }

        registerTab() {
            this.tabSessions[this.tabId] = {
                id: this.tabId,
                url: window.location.href,
                title: document.title || 'UGPhone',
                lastActivity: Date.now(),
                account: this.currentAccount,
                created: this.tabSessions[this.tabId]?.created || Date.now(),
                isClean: sessionStorage.getItem('isCleanTab') === 'true'
            };
            GM_setValue('tab_sessions', this.tabSessions);
        }

        updateTabActivity() {
            if (this.tabSessions[this.tabId]) {
                this.tabSessions[this.tabId].lastActivity = Date.now();
                this.tabSessions[this.tabId].account = this.currentAccount;
                GM_setValue('tab_sessions', this.tabSessions);
            }
        }

        cleanupClosedTabs() {
            const now = Date.now();
            let changed = false;
            Object.keys(this.tabSessions).forEach(tabId => {
                if (tabId !== this.tabId && (now - this.tabSessions[tabId].lastActivity) > 30000) {
                    delete this.tabSessions[tabId];
                    changed = true;
                }
            });
            if (changed) GM_setValue('tab_sessions', this.tabSessions);
        }

        loadTabAccount() {
            const tabInfo = this.tabSessions[this.tabId];
            if (tabInfo && tabInfo.account && this.accounts[tabInfo.account] && !tabInfo.isClean) {
                this.currentAccount = tabInfo.account;
                this.applyAccount(this.accounts[tabInfo.account]);
            }
        }

        createUI() {
            const savedPos = GM_getValue('toggle_button_position', { top: 20, left: window.innerWidth - 180 });
            const toggleBtn = document.createElement('button');
            toggleBtn.id = 'toggleBtn';
            toggleBtn.innerHTML = 'üóÇÔ∏è';
            toggleBtn.title = "Qu·∫£n l√Ω t√†i kho·∫£n (K√©o th·∫£ ho·∫∑c nh·∫•n v√†o)";
            toggleBtn.style.top = savedPos.top + 'px';
            toggleBtn.style.left = savedPos.left + 'px';
            toggleBtn.style.position = 'fixed';
            document.body.appendChild(toggleBtn);

            const panel = document.createElement('div');
            panel.id = 'tabManager';
            panel.style.display = 'none';
            panel.innerHTML = this.getUIHTML();
            document.body.appendChild(panel);

            this.attachEvents();
        }

        setupDragging() {
            const toggleBtn = document.getElementById('toggleBtn');
            if (!toggleBtn) return;
            let self = this;

            toggleBtn.addEventListener('mousedown', function(e) {
                self.isDragging = true;
                toggleBtn.classList.add('dragging');
                const rect = toggleBtn.getBoundingClientRect();
                self.dragOffset.x = e.clientX - rect.left;
                self.dragOffset.y = e.clientY - rect.top;
                self.lastPointerDown = {x: e.clientX, y: e.clientY, t: Date.now()};
                document.body.style.userSelect = 'none';
            });

            document.addEventListener('mousemove', function(e) {
                if (self.isDragging) {
                    let newX = e.clientX - self.dragOffset.x;
                    let newY = e.clientY - self.dragOffset.y;
                    const maxX = window.innerWidth - toggleBtn.offsetWidth;
                    const maxY = window.innerHeight - toggleBtn.offsetHeight;
                    newX = Math.max(0, Math.min(newX, maxX));
                    newY = Math.max(0, Math.min(newY, maxY));
                    toggleBtn.style.left = newX + 'px';
                    toggleBtn.style.top = newY + 'px';
                }
            });

            document.addEventListener('mouseup', function(e) {
                if (self.isDragging) {
                    self.isDragging = false;
                    toggleBtn.classList.remove('dragging');
                    document.body.style.userSelect = '';
                    const rect = toggleBtn.getBoundingClientRect();
                    GM_setValue('toggle_button_position', { top: rect.top, left: rect.left });

                    const dx = Math.abs(e.clientX - self.lastPointerDown.x);
                    const dy = Math.abs(e.clientY - self.lastPointerDown.y);
                    const dt = Date.now() - self.lastPointerDown.t;
                    if (dx < 5 && dy < 5 && dt < 400) {
                        self.toggleMenu();
                    }
                }
            });

            toggleBtn.addEventListener('touchstart', function(e) {
                e.preventDefault();
                const touch = e.touches[0];
                self.isDragging = true;
                toggleBtn.classList.add('dragging');
                const rect = toggleBtn.getBoundingClientRect();
                self.dragOffset.x = touch.clientX - rect.left;
                self.dragOffset.y = touch.clientY - rect.top;
                self.lastPointerDown = {x: touch.clientX, y: touch.clientY, t: Date.now()};
                document.body.style.userSelect = 'none';
            });

            document.addEventListener('touchmove', function(e) {
                if (self.isDragging) {
                    e.preventDefault();
                    const touch = e.touches[0];
                    let newX = touch.clientX - self.dragOffset.x;
                    let newY = touch.clientY - self.dragOffset.y;
                    const maxX = window.innerWidth - toggleBtn.offsetWidth;
                    const maxY = window.innerHeight - toggleBtn.offsetHeight;
                    newX = Math.max(0, Math.min(newX, maxX));
                    newY = Math.max(0, Math.min(newY, maxY));
                    toggleBtn.style.left = newX + 'px';
                    toggleBtn.style.top = newY + 'px';
                }
            });

            document.addEventListener('touchend', function(e) {
                if (self.isDragging) {
                    self.isDragging = false;
                    toggleBtn.classList.remove('dragging');
                    document.body.style.userSelect = '';
                    const rect = toggleBtn.getBoundingClientRect();
                    GM_setValue('toggle_button_position', { top: rect.top, left: rect.left });
                    self.toggleMenu();
                }
            });
        }

        toggleMenu() {
            const panel = document.getElementById('tabManager');
            if (!panel) return;
            panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
            if (panel.style.display === 'block') this.refreshUI();
        }

        getUIHTML() {
            return `
                <h2>üóÇÔ∏è Qu·∫£n l√Ω t√†i kho·∫£n</h2>
                <div style="font-size:11px;text-align:right;opacity:0.7;">K√©o icon ƒë·ªÉ ƒë·ªïi v·ªã tr√≠, click ƒë·ªÉ m·ªü menu.</div>
                <div style="font-size:12px;color:#fffbe0;background:#e67e22;padding:7px 13px;border-radius:8px;margin:10px 0 10px 0;text-align:center;">
                  <b>L∆∞u √Ω:</b> H√£y nh·ªõ <u>l∆∞u t√†i kho·∫£n hi·ªán t·∫°i</u> l·∫°i tr∆∞·ªõc khi m·ªü ho·∫∑c chuy·ªÉn sang tab m·ªõi. N·∫øu kh√¥ng, m·ªçi d·ªØ li·ªáu ƒëƒÉng nh·∫≠p s·∫Ω b·ªã m·∫•t[...]
                </div>
                <div class="tab-info current-tab">
                    <h3>Tab hi·ªán t·∫°i</h3>
                    <div><strong>ID:</strong> ${this.tabId}</div>
                    <div><strong>T√†i kho·∫£n:</strong> <span id="currentAccountName">${this.currentAccount ? this.accounts[this.currentAccount]?.name || 'Ch∆∞a ch·ªçn' : 'Ch∆∞a ch·ªçn'}</span></div>
                    <div><strong>Lo·∫°i tab:</strong> ${sessionStorage.getItem('isCleanTab') === 'true' ? 'Tab m·ªõi' : 'Tab th∆∞·ªùng'}</div>
                    <div class="flex-row" style="margin-top: 10px;">
                        <button class="btn btn-primary" id="saveAccountBtn">L∆∞u t√†i kho·∫£n</button>
                        <button class="btn btn-warning" id="clearTabBtn">ƒê·∫∑t l·∫°i tab</button>
                    </div>
                </div>
                <div class="account-selector">
                    <h3>Ch·ªçn t√†i kho·∫£n cho tab n√†y</h3>
                    <div id="accountList"></div>
                </div>
                <div style="margin-top: 15px;">
                    <button class="btn btn-info" id="openCleanTabBtn">M·ªü tab m·ªõi</button>
                    <button class="btn btn-info" id="openTabWithAccountBtn">M·ªü tab v·ªõi t√†i kho·∫£n</button>
                    <button class="btn btn-danger" id="clearAllAccountsBtn">X√≥a t·∫•t c·∫£</button>
                </div>
                <div style="text-align:center;font-size:11px;opacity:0.5;margin-top:10px" id="minhbeo8-watermark">
                    Made by Minhbeo8
                </div>
            `;
        }

        attachEvents() {
            setTimeout(() => {
                // G√°n l·∫°i s·ª± ki·ªán cho t·ª´ng n√∫t delete sau m·ªói l·∫ßn render
                this.updateAccountList(); // s·∫Ω setup lu√¥n c√°c s·ª± ki·ªán x√≥a v√† ch·ªçn account

                const saveBtn = document.getElementById('saveAccountBtn');
                const clearBtn = document.getElementById('clearTabBtn');
                const openCleanBtn = document.getElementById('openCleanTabBtn');
                const openWithAccountBtn = document.getElementById('openTabWithAccountBtn');
                const clearAllBtn = document.getElementById('clearAllAccountsBtn');
                if (saveBtn) saveBtn.onclick = () => this.saveCurrentAccount();
                if (clearBtn) clearBtn.onclick = () => this.clearCurrentTab();
                if (openCleanBtn) openCleanBtn.onclick = () => this.openNewCleanTab();
                if (openWithAccountBtn) openWithAccountBtn.onclick = () => this.openNewTabWithAccount();
                if (clearAllBtn) clearAllBtn.onclick = () => this.clearAllAccounts();
            }, 100);
        }

        refreshUI() {
            this.updateAccountList();
            this.updateCurrentAccountName();
        }
        updateCurrentAccountName() {
            const nameElement = document.getElementById('currentAccountName');
            if (nameElement) {
                nameElement.textContent = this.currentAccount ?
                    (this.accounts[this.currentAccount]?.name || 'Ch∆∞a ch·ªçn') : 'Ch∆∞a ch·ªçn';
            }
        }

        updateAccountList() {
            const container = document.getElementById('accountList');
            if (!container) return;
            const accountIds = Object.keys(this.accounts);
            if (accountIds.length === 0) {
                container.innerHTML = '<div style="text-align: center; opacity: 0.7;">Ch∆∞a c√≥ t√†i kho·∫£n n√†o. H√£y l∆∞u t√†i kho·∫£n ƒë·∫ßu ti√™n!</div>';
                return;
            }
            container.innerHTML = accountIds.map(accountId => {
                const account = this.accounts[accountId];
                const isActive = this.currentAccount === accountId;
                return `
                    <div class="account-item ${isActive ? 'active' : ''}" 
                         data-account-id="${accountId}">
                        <div>
                            <strong>${account.name}</strong>
                            <div style="font-size: 11px; opacity: 0.8;">
                                L∆∞u: ${new Date(account.created).toLocaleString()}
                            </div>
                        </div>
                        <div style="display:flex;align-items:center;gap:5px;">
                            ${isActive ? '<span style="color: #4CAF50; font-size:11px;">ƒêang d√πng</span>' : ''}
                            <button class="btn btn-danger btn-delete-account" style="padding: 4px 8px; font-size: 10px;" 
                                    data-account-id="${accountId}">X√≥a</button>
                        </div>
                    </div>
                `;
            }).join('');

            // G√°n s·ª± ki·ªán click cho t·ª´ng n√∫t X√≥a
            container.querySelectorAll('.btn-delete-account').forEach(btn => {
                btn.onclick = (e) => {
                    e.stopPropagation();
                    const aid = btn.getAttribute('data-account-id');
                    this.deleteAccount(aid);
                };
            });

            // G√°n s·ª± ki·ªán ch·ªçn account cho c·∫£ kh·ªëi
            container.querySelectorAll('.account-item').forEach(item => {
                item.onclick = (e) => {
                    if (e.target.classList.contains('btn-delete-account')) return;
                    const aid = item.getAttribute('data-account-id');
                    this.selectAccount(aid);
                };
            });
        }

        saveCurrentAccount() {
            const accountName = prompt('Nh·∫≠p t√™n t√†i kho·∫£n:');
            if (!accountName || !accountName.trim()) return;
            const accountId = 'acc_' + Date.now() + '_' + Math.random().toString(36).substr(2, 6);
            const accountData = {
                id: accountId,
                name: accountName.trim(),
                localStorage: this.getCurrentLocalStorage(),
                cookies: this.getCurrentCookies(),
                created: Date.now()
            };
            this.accounts[accountId] = accountData;
            GM_setValue('saved_accounts', this.accounts);
            this.currentAccount = accountId;
            this.registerTab();
            alert(`ƒê√£ l∆∞u t√†i kho·∫£n "${accountName}" th√†nh c√¥ng!`);
            this.refreshUI();
        }
        selectAccount(accountId) {
            if (!this.accounts[accountId]) return;
            const account = this.accounts[accountId];
            this.clearCurrentData();
            setTimeout(() => {
                this.applyAccount(account);
                this.currentAccount = accountId;
                sessionStorage.removeItem('isCleanTab');
                this.registerTab();
                alert(`ƒê√£ chuy·ªÉn sang t√†i kho·∫£n "${account.name}". Trang s·∫Ω t·ª± t·∫£i l·∫°i.`);
                setTimeout(() => location.reload(), 1000);
            }, 500);
        }
        applyAccount(account) {
            Object.entries(account.localStorage).forEach(([key, value]) => {
                try {
                    if (key !== 'multiTabId') localStorage.setItem(key, value);
                } catch (e) { /* Do nothing */ }
            });
            Object.entries(account.cookies).forEach(([name, value]) => {
                document.cookie = `${name}=${value}; path=/; domain=.ugphone.com; max-age=86400`;
            });
        }
        clearCurrentTab() {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën ƒë·∫∑t l·∫°i tab n√†y kh√¥ng?')) {
                this.clearCurrentData();
                this.currentAccount = null;
                sessionStorage.setItem('isCleanTab', 'true');
                this.registerTab();
                alert('Tab ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i!');
                setTimeout(() => location.reload(), 1000);
            }
        }
        clearCurrentData() {
            const keysToRemove = [];
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key && !key.startsWith('GM_') && !key.includes('tampermonkey') && key !== 'multiTabId') {
                    keysToRemove.push(key);
                }
            }
            keysToRemove.forEach(key => localStorage.removeItem(key));
            this.clearAllCookies();
        }
        deleteAccount(accountId) {
            const account = this.accounts[accountId];
            if (confirm(`X√≥a t√†i kho·∫£n "${account.name}"?`)) {
                delete this.accounts[accountId];
                GM_setValue('saved_accounts', this.accounts);
                if (this.currentAccount === accountId) {
                    this.currentAccount = null;
                    this.registerTab();
                }
                this.refreshUI();
                alert(`ƒê√£ x√≥a t√†i kho·∫£n "${account.name}".`);
            }
        }
        clearAllAccounts() {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ t√†i kho·∫£n ƒë√£ l∆∞u?')) {
                this.accounts = {};
                GM_setValue('saved_accounts', {});
                this.currentAccount = null;
                this.registerTab();
                this.refreshUI();
                alert('ƒê√£ x√≥a t·∫•t c·∫£ t√†i kho·∫£n!');
            }
        }
        openNewCleanTab() {
            GM_setValue('clean_next_tab', true);
            // H·ªó tr·ª£ m·ªçi m√¥i tr∆∞·ªùng (PC/mobile, browser n√†o c≈©ng ƒë∆∞·ª£c)
            if (typeof GM_openInTab === "function") {
                GM_openInTab(window.location.origin + '/toc-portal/', {
                    active: true,
                    insert: true,
                    setParent: false
                });
            } else {
                window.open(window.location.origin + '/toc-portal/', '_blank');
            }
            // alert sau khi g·ªçi m·ªü tab
            setTimeout(() => {
                alert('ƒê√£ m·ªü tab m·ªõi!');
            }, 100);
        }
        openNewTabWithAccount() {
            const accountIds = Object.keys(this.accounts);
            if (accountIds.length === 0) {
                alert('Ch∆∞a c√≥ t√†i kho·∫£n n√†o! H√£y l∆∞u tr∆∞·ªõc.');
                return;
            }
            const accountId = prompt(
                `Ch·ªçn t√†i kho·∫£n (nh·∫≠p s·ªë 1-${accountIds.length}):\n` +
                accountIds.map((id, index) => `${index + 1}. ${this.accounts[id].name}`).join('\n')
            );
            const index = parseInt(accountId) - 1;
            if (index >= 0 && index < accountIds.length) {
                GM_setValue('next_tab_account', accountIds[index]);
                if (typeof GM_openInTab === "function") {
                    GM_openInTab(window.location.origin + '/toc-portal/', {
                        active: true,
                        insert: true,
                        setParent: false
                    });
                } else {
                    window.open(window.location.origin + '/toc-portal/', '_blank');
                }
                setTimeout(() => {
                    alert('ƒê√£ m·ªü tab m·ªõi v·ªõi t√†i kho·∫£n ƒë√£ ch·ªçn!');
                }, 100);
            }
        }
        getCurrentLocalStorage() {
            const data = {};
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key && !key.startsWith('GM_') && !key.includes('tampermonkey') && key !== 'multiTabId') {
                    data[key] = localStorage.getItem(key);
                }
            }
            return data;
        }
        getCurrentCookies() {
            const cookies = {};
            document.cookie.split(';').forEach(cookie => {
                const [name, value] = cookie.trim().split('=');
                if (name && value) {
                    cookies[name] = value;
                }
            });
            return cookies;
        }
        checkNewTabAccount() {
            const nextAccount = GM_getValue('next_tab_account', null);
            if (nextAccount && this.accounts[nextAccount]) {
                GM_deleteValue('next_tab_account');
                setTimeout(() => {
                    this.selectAccount(nextAccount);
                }, 2000);
            }
        }
    }

    function init() {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                setTimeout(() => {
                    window.tabManager = new MultiTabAccountManager();
                    window.tabManager.checkNewTabAccount();
                }, 1000);
            });
        } else {
            setTimeout(() => {
                window.tabManager = new MultiTabAccountManager();
                window.tabManager.checkNewTabAccount();
            }, 1000);
        }
    }

    init();
})();
